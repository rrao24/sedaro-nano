//! This file defines the grammar for the query language. See: https://lalrpop.github.io/lalrpop/

use crate::Query;

grammar;

pub Query: Query = {
    "prev!(" <q: Query> ")" => Query::Prev(Box::new(q)),
    "root!" => Query::Root,
    "agent!(" <s: r"[a-zA-Z][a-zA-z0-9]*"> ")" => Query::Agent(s.to_string()),
    <s: r"[a-zA-Z][a-zA-z0-9]*"> => Query::Base(s.to_string()),
    "(" <qs: CommaPlus<Query>> ")" => Query::Tuple(qs),
    <q: Query> "." <s: r"[a-zA-Z][a-zA-z0-9]*"> => Query::Access{ base: Box::new(q), field: s.to_string() },
}

// Requires trailing comma for unary tuple-ish things
CommaPlus<T>: Vec<T> = {
    <mut v:(<T> ",")+> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}
